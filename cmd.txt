python detect.py --image_folder data/samples

python detect.py --image_folder data/samples

# ================================================================================
yolo v3 shape
('layers', [-4])
('before layers', [512])
('filters', 512)
('layers', [-1, 61])
('before layers', [256, 512])
('filters', 768)
('layers', [-4])
('before layers', [256])
('filters', 256)
('layers', [-1, 36])
('before layers', [128, 256])
('filters', 384)
[3, 32, 64, 32, 64, 64, 128, 64, 128, 128,
 64, 128, 128, 256, 128, 256, 256, 128, 256, 256,
128, 256, 256, 128, 256, 256, 128, 256, 256, 128,
256, 256, 128, 256, 256, 128, 256, 256, 512, 256,
512, 512, 256, 512, 512, 256, 512, 512, 256, 512,
512, 256, 512, 512, 256, 512, 512, 256, 512, 512,
256, 512, 512, 1024, 512, 1024, 1024, 512, 1024, 1024,
512, 1024, 1024, 512, 1024, 1024, 512, 1024, 512, 1024,
512, 1024, 255, 255, 512, 256, 256, 768, 256, 512,
256, 512, 256, 512, 255, 255, 256, 128, 128, 384,
128, 256, 128, 256, 128, 256, 255, 255]

('convolutional', (1, 32, 416, 416))
('convolutional', (1, 64, 208, 208))
('convolutional', (1, 32, 208, 208))
('convolutional', (1, 64, 208, 208))
('shortcut', (1, 64, 208, 208))
('convolutional', (1, 128, 104, 104))
('convolutional', (1, 64, 104, 104))
('convolutional', (1, 128, 104, 104))
('shortcut', (1, 128, 104, 104))
('convolutional', (1, 64, 104, 104))
('convolutional', (1, 128, 104, 104))
('shortcut', (1, 128, 104, 104))
('convolutional', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('shortcut', (1, 256, 52, 52))
('convolutional', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('shortcut', (1, 512, 26, 26))
('convolutional', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('shortcut', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('shortcut', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('shortcut', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('shortcut', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('convolutional', (1, 255, 13, 13))
('yolo', (1, 507, 85))
('route', (1, 512, 13, 13))
('convolutional', (1, 256, 13, 13))
('upsample', (1, 256, 26, 26))
('route', (1, 768, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('convolutional', (1, 256, 26, 26))
('convolutional', (1, 512, 26, 26))
('convolutional', (1, 255, 26, 26))
('yolo', (1, 2028, 85))
('route', (1, 256, 26, 26))
('convolutional', (1, 128, 26, 26))
('upsample', (1, 128, 52, 52))
('route', (1, 384, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('convolutional', (1, 128, 52, 52))
('convolutional', (1, 256, 52, 52))
('convolutional', (1, 255, 52, 52))
('yolo', (1, 8112, 85))

# ================================================================================
yolo v3-tiny shape
('layers', [-4])
('before layers', [256])
('filters', 256)
('layers', [-1, 8])
('before layers', [128, 128])
('filters', 256)
[3, 16, 16, 32, 32, 64, 64, 128, 128, 256,
256, 512, 512, 1024, 256, 512, 255, 255, 256, 128,
128, 256, 256, 255, 255]

('convolutional', (1, 16, 416, 416))
('maxpool', (1, 16, 208, 208))
('convolutional', (1, 32, 208, 208))
('maxpool', (1, 32, 104, 104))
('convolutional', (1, 64, 104, 104))
('maxpool', (1, 64, 52, 52))
('convolutional', (1, 128, 52, 52))
('maxpool', (1, 128, 26, 26))
('convolutional', (1, 256, 26, 26))
('maxpool', (1, 256, 13, 13))
('convolutional', (1, 512, 13, 13))
('maxpool', (1, 512, 13, 13))
('convolutional', (1, 1024, 13, 13))
('convolutional', (1, 256, 13, 13))
('convolutional', (1, 512, 13, 13))
('convolutional', (1, 255, 13, 13))
('yolo', (1, 507, 85))
('route', (1, 256, 13, 13))
('convolutional', (1, 128, 13, 13))
('upsample', (1, 128, 26, 26))
('route', (1, 384, 26, 26))